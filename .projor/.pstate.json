{
  "generatedSource": [
    {
      "filename": "panels/quick-fade.jsx",
      "content": "(function quickFade(thisObj) {\n    function onHalfSecondFadein() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - Half Second Fadein: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - Half Second Fadein\");\n\n        // Effect 'Fadein'\n        // 0.5s fade in\n        function fxFadein() {\n            const props = {\n                t: 0.5,\n            };\n            // Fade In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the opacity set to 0.\n            // The second keyframe at the inPoint + t, with the opacity set to 100.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint,\n                    0\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint + props.t,\n                    100\n                );\n            }\n        }\n        // End of effect 'Fadein'\n        // Call effect\n        fxFadein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOneSecondFadein() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - One Second Fadein: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - One Second Fadein\");\n\n        // Effect 'Fadein'\n        // 1s fade in\n        function fxFadein() {\n            const props = {\n                t: 1.0,\n            };\n            // Fade In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the opacity set to 0.\n            // The second keyframe at the inPoint + t, with the opacity set to 100.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint,\n                    0\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint + props.t,\n                    100\n                );\n            }\n        }\n        // End of effect 'Fadein'\n        // Call effect\n        fxFadein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onTwoSecondFadein() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - Two Second Fadein: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - Two Second Fadein\");\n\n        // Effect 'Fadein'\n        // 2s fade in\n        function fxFadein() {\n            const props = {\n                t: 2.0,\n            };\n            // Fade In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the opacity set to 0.\n            // The second keyframe at the inPoint + t, with the opacity set to 100.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint,\n                    0\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.inPoint + props.t,\n                    100\n                );\n            }\n        }\n        // End of effect 'Fadein'\n        // Call effect\n        fxFadein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onHalfSecondFadeout() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - Half Second Fadeout: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - Half Second Fadeout\");\n\n        // Effect 'Fadeout'\n        // 0.5s fade out\n        function fxFadeout() {\n            const props = {\n                t: 0.5,\n            };\n            // Fade Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the opacity set to 100.\n            // The second keyframe at the outPoint, with the opacity set to 0.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint - props.t,\n                    100\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint,\n                    0\n                );\n            }\n        }\n        // End of effect 'Fadeout'\n        // Call effect\n        fxFadeout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOneSecondFadeout() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - One Second Fadeout: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - One Second Fadeout\");\n\n        // Effect 'Fadeout'\n        // 1s fade out\n        function fxFadeout() {\n            const props = {\n                t: 1.0,\n            };\n            // Fade Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the opacity set to 100.\n            // The second keyframe at the outPoint, with the opacity set to 0.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint - props.t,\n                    100\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint,\n                    0\n                );\n            }\n        }\n        // End of effect 'Fadeout'\n        // Call effect\n        fxFadeout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onTwoSecondFadeout() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Fade - Two Second Fadeout: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Fade - Two Second Fadeout\");\n\n        // Effect 'Fadeout'\n        // 2s fade out\n        function fxFadeout() {\n            const props = {\n                t: 2.0,\n            };\n            // Fade Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the opacity set to 100.\n            // The second keyframe at the outPoint, with the opacity set to 0.\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Create keyframes\n                var key1 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint - props.t,\n                    100\n                );\n                var key2 = layer.transform.opacity.setValueAtTime(\n                    layer.outPoint,\n                    0\n                );\n            }\n        }\n        // End of effect 'Fadeout'\n        // Call effect\n        fxFadeout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Fade\");\n        w.groupFadeinsPanel = w.add(\"panel\", undefined, \"Fade In Effects\");\n        w.groupFadeins = w.groupFadeinsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupFadeins.buttonHalfSecondFadein = w.groupFadeins.add(\n            \"button\",\n            undefined,\n            \"0.5s\"\n        );\n        w.groupFadeins.buttonHalfSecondFadein.onClick = function () {\n            onHalfSecondFadein();\n        };\n        w.groupFadeins.buttonOneSecondFadein = w.groupFadeins.add(\n            \"button\",\n            undefined,\n            \"1s\"\n        );\n        w.groupFadeins.buttonOneSecondFadein.onClick = function () {\n            onOneSecondFadein();\n        };\n        w.groupFadeins.buttonTwoSecondFadein = w.groupFadeins.add(\n            \"button\",\n            undefined,\n            \"2s\"\n        );\n        w.groupFadeins.buttonTwoSecondFadein.onClick = function () {\n            onTwoSecondFadein();\n        };\n        w.groupFadeoutsPanel = w.add(\"panel\", undefined, \"Fade Out Effects\");\n        w.groupFadeouts = w.groupFadeoutsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupFadeouts.buttonHalfSecondFadeout = w.groupFadeouts.add(\n            \"button\",\n            undefined,\n            \"0.5s\"\n        );\n        w.groupFadeouts.buttonHalfSecondFadeout.onClick = function () {\n            onHalfSecondFadeout();\n        };\n        w.groupFadeouts.buttonOneSecondFadeout = w.groupFadeouts.add(\n            \"button\",\n            undefined,\n            \"1s\"\n        );\n        w.groupFadeouts.buttonOneSecondFadeout.onClick = function () {\n            onOneSecondFadeout();\n        };\n        w.groupFadeouts.buttonTwoSecondFadeout = w.groupFadeouts.add(\n            \"button\",\n            undefined,\n            \"2s\"\n        );\n        w.groupFadeouts.buttonTwoSecondFadeout.onClick = function () {\n            onTwoSecondFadeout();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "08c6084eb172ba9d54ccfce3f09c2e236377642b8dcafad1fc40a331472ad177",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-infzooms.jsx",
      "content": "(function quickInfzooms(thisObj) {\n    function onZoomIn_10() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom In 10: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom In 10\");\n\n        // Effect 'Infzoom'\n        // Zoom In 10px\n        function fxInfzoom() {\n            const props = {\n                offset: [10, 10],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onZoomIn_20() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom In 20: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom In 20\");\n\n        // Effect 'Infzoom'\n        // Zoom In 20px\n        function fxInfzoom() {\n            const props = {\n                offset: [20, 20],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onZoomIn_50() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom In 50: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom In 50\");\n\n        // Effect 'Infzoom'\n        // Zoom In 50px\n        function fxInfzoom() {\n            const props = {\n                offset: [50, 50],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onZoomOut_10() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom Out 10: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom Out 10\");\n\n        // Effect 'Infzoom'\n        // Zoom Out 10px\n        function fxInfzoom() {\n            const props = {\n                offset: [-10, -10],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onZoomOut_20() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom Out 20: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom Out 20\");\n\n        // Effect 'Infzoom'\n        // Zoom Out 20px\n        function fxInfzoom() {\n            const props = {\n                offset: [-20, -20],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onZoomOut_50() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Infzooms - Zoom Out 50: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Infzooms - Zoom Out 50\");\n\n        // Effect 'Infzoom'\n        // Zoom Out 50px\n        function fxInfzoom() {\n            const props = {\n                offset: [-50, -50],\n            };\n            // Infinite Zooming effect\n            // Props:\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current scale\n            // The second keyframe at the outPoint, with the position set to current scale + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Infzoom'\n        // Call effect\n        fxInfzoom();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Infinite Zooms\");\n        w.groupZoomInsPanel = w.add(\"panel\", undefined, \"Zoom In\");\n        w.groupZoomIns = w.groupZoomInsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupZoomIns.buttonZoomIn_10 = w.groupZoomIns.add(\n            \"button\",\n            undefined,\n            \"10%\"\n        );\n        w.groupZoomIns.buttonZoomIn_10.onClick = function () {\n            onZoomIn_10();\n        };\n        w.groupZoomIns.buttonZoomIn_20 = w.groupZoomIns.add(\n            \"button\",\n            undefined,\n            \"20%\"\n        );\n        w.groupZoomIns.buttonZoomIn_20.onClick = function () {\n            onZoomIn_20();\n        };\n        w.groupZoomIns.buttonZoomIn_50 = w.groupZoomIns.add(\n            \"button\",\n            undefined,\n            \"50%\"\n        );\n        w.groupZoomIns.buttonZoomIn_50.onClick = function () {\n            onZoomIn_50();\n        };\n        w.groupZoomOutsPanel = w.add(\"panel\", undefined, \"Zoom Out\");\n        w.groupZoomOuts = w.groupZoomOutsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupZoomOuts.buttonZoomOut_10 = w.groupZoomOuts.add(\n            \"button\",\n            undefined,\n            \"10%\"\n        );\n        w.groupZoomOuts.buttonZoomOut_10.onClick = function () {\n            onZoomOut_10();\n        };\n        w.groupZoomOuts.buttonZoomOut_20 = w.groupZoomOuts.add(\n            \"button\",\n            undefined,\n            \"20%\"\n        );\n        w.groupZoomOuts.buttonZoomOut_20.onClick = function () {\n            onZoomOut_20();\n        };\n        w.groupZoomOuts.buttonZoomOut_50 = w.groupZoomOuts.add(\n            \"button\",\n            undefined,\n            \"50%\"\n        );\n        w.groupZoomOuts.buttonZoomOut_50.onClick = function () {\n            onZoomOut_50();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "078a18b6af7759260323ccd63a29b8edec8ddd688f9668bfbddbcf1b08fc00ee",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-movein.jsx",
      "content": "(function quickMovein(thisObj) {\n    function onLeftHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Left Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Left Half Second 100\");\n\n        // Effect 'Movein'\n        // 0.5s 100px left move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [-100, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Left One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Left One Second 100\");\n\n        // Effect 'Movein'\n        // 1s 100px left move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [-100, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Left Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Left Half Second 250\");\n\n        // Effect 'Movein'\n        // 0.5s 250px left move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [-250, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Left One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Left One Second 250\");\n\n        // Effect 'Movein'\n        // 1s 250px left move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [-250, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Right Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Right Half Second 100\");\n\n        // Effect 'Movein'\n        // 0.5s 100px right move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [100, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Right One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Right One Second 100\");\n\n        // Effect 'Movein'\n        // 1s 100px right move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [100, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Right Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Right Half Second 250\");\n\n        // Effect 'Movein'\n        // 0.5s 250px right move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [250, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Right One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Right One Second 250\");\n\n        // Effect 'Movein'\n        // 1s 250px right move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [250, 0],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Up Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Up Half Second 100\");\n\n        // Effect 'Movein'\n        // 0.5s 100px up move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [0, 100],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Up One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Up One Second 100\");\n\n        // Effect 'Movein'\n        // 1s 100px up move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [0, 100],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Up Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Up Half Second 250\");\n\n        // Effect 'Movein'\n        // 0.5s 250px up move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [0, 250],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Up One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Up One Second 250\");\n\n        // Effect 'Movein'\n        // 1s 250px up move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [0, 250],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Down Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Down Half Second 100\");\n\n        // Effect 'Movein'\n        // 0.5s 100px down move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [0, -100],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Down One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Down One Second 100\");\n\n        // Effect 'Movein'\n        // 1s 100px down move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [0, -100],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Down Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Down Half Second 250\");\n\n        // Effect 'Movein'\n        // 0.5s 250px down move in\n        function fxMovein() {\n            const props = {\n                t: 0.5,\n                offset: [0, -250],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Movein - Down One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Movein - Down One Second 250\");\n\n        // Effect 'Movein'\n        // 1s 250px down move in\n        function fxMovein() {\n            const props = {\n                t: 1.0,\n                offset: [0, -250],\n            };\n            // Move In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos + offset\n            // The second keyframe at the inPoint + t, with the position set to current pos\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentPos\n                );\n            }\n        }\n        // End of effect 'Movein'\n        // Call effect\n        fxMovein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Move In\");\n        w.groupLeftPanel = w.add(\"panel\", undefined, \"Left\");\n        w.groupLeft = w.groupLeftPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupLeft.buttonLeftHalfSecond_100 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupLeft.buttonLeftHalfSecond_100.onClick = function () {\n            onLeftHalfSecond_100();\n        };\n        w.groupLeft.buttonLeftOneSecond_100 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupLeft.buttonLeftOneSecond_100.onClick = function () {\n            onLeftOneSecond_100();\n        };\n        w.groupLeft.buttonLeftHalfSecond_250 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupLeft.buttonLeftHalfSecond_250.onClick = function () {\n            onLeftHalfSecond_250();\n        };\n        w.groupLeft.buttonLeftOneSecond_250 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupLeft.buttonLeftOneSecond_250.onClick = function () {\n            onLeftOneSecond_250();\n        };\n        w.groupRightPanel = w.add(\"panel\", undefined, \"Right\");\n        w.groupRight = w.groupRightPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupRight.buttonRightHalfSecond_100 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupRight.buttonRightHalfSecond_100.onClick = function () {\n            onRightHalfSecond_100();\n        };\n        w.groupRight.buttonRightOneSecond_100 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupRight.buttonRightOneSecond_100.onClick = function () {\n            onRightOneSecond_100();\n        };\n        w.groupRight.buttonRightHalfSecond_250 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupRight.buttonRightHalfSecond_250.onClick = function () {\n            onRightHalfSecond_250();\n        };\n        w.groupRight.buttonRightOneSecond_250 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupRight.buttonRightOneSecond_250.onClick = function () {\n            onRightOneSecond_250();\n        };\n        w.groupUpPanel = w.add(\"panel\", undefined, \"Up\");\n        w.groupUp = w.groupUpPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupUp.buttonUpHalfSecond_100 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupUp.buttonUpHalfSecond_100.onClick = function () {\n            onUpHalfSecond_100();\n        };\n        w.groupUp.buttonUpOneSecond_100 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupUp.buttonUpOneSecond_100.onClick = function () {\n            onUpOneSecond_100();\n        };\n        w.groupUp.buttonUpHalfSecond_250 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupUp.buttonUpHalfSecond_250.onClick = function () {\n            onUpHalfSecond_250();\n        };\n        w.groupUp.buttonUpOneSecond_250 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupUp.buttonUpOneSecond_250.onClick = function () {\n            onUpOneSecond_250();\n        };\n        w.groupDownPanel = w.add(\"panel\", undefined, \"Down\");\n        w.groupDown = w.groupDownPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupDown.buttonDownHalfSecond_100 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupDown.buttonDownHalfSecond_100.onClick = function () {\n            onDownHalfSecond_100();\n        };\n        w.groupDown.buttonDownOneSecond_100 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupDown.buttonDownOneSecond_100.onClick = function () {\n            onDownOneSecond_100();\n        };\n        w.groupDown.buttonDownHalfSecond_250 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupDown.buttonDownHalfSecond_250.onClick = function () {\n            onDownHalfSecond_250();\n        };\n        w.groupDown.buttonDownOneSecond_250 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupDown.buttonDownOneSecond_250.onClick = function () {\n            onDownOneSecond_250();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "ab135873a3dfe4726d0dd8ae541c65aa85dc9a820f7173b20d4f1b4fd58fead4",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-moveout.jsx",
      "content": "(function quickMoveout(thisObj) {\n    function onLeftHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Left Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Left Half Second 100\");\n\n        // Effect 'Moveout'\n        // 0.5s 100px left move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [-100, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Left One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Left One Second 100\");\n\n        // Effect 'Moveout'\n        // 1s 100px left move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [-100, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Left Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Left Half Second 250\");\n\n        // Effect 'Moveout'\n        // 0.5s 250px left move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [-250, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onLeftOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Left One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Left One Second 250\");\n\n        // Effect 'Moveout'\n        // 1s 250px left move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [-250, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Right Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Right Half Second 100\");\n\n        // Effect 'Moveout'\n        // 0.5s 100px right move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [100, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Right One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Right One Second 100\");\n\n        // Effect 'Moveout'\n        // 1s 100px right move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [100, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Right Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Right Half Second 250\");\n\n        // Effect 'Moveout'\n        // 0.5s 250px right move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [250, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onRightOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Right One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Right One Second 250\");\n\n        // Effect 'Moveout'\n        // 1s 250px right move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [250, 0],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Up Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Up Half Second 100\");\n\n        // Effect 'Moveout'\n        // 0.5s 100px up move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [0, 100],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Up One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Up One Second 100\");\n\n        // Effect 'Moveout'\n        // 1s 100px up move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [0, 100],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Up Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Up Half Second 250\");\n\n        // Effect 'Moveout'\n        // 0.5s 250px up move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [0, 250],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onUpOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Up One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Up One Second 250\");\n\n        // Effect 'Moveout'\n        // 1s 250px up move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [0, 250],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownHalfSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Down Half Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Down Half Second 100\");\n\n        // Effect 'Moveout'\n        // 0.5s 100px down move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [0, -100],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownOneSecond_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Down One Second 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Down One Second 100\");\n\n        // Effect 'Moveout'\n        // 1s 100px down move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [0, -100],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownHalfSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Down Half Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Down Half Second 250\");\n\n        // Effect 'Moveout'\n        // 0.5s 250px down move out\n        function fxMoveout() {\n            const props = {\n                t: 0.5,\n                offset: [0, -250],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onDownOneSecond_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Moveout - Down One Second 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Moveout - Down One Second 250\");\n\n        // Effect 'Moveout'\n        // 1s 250px down move out\n        function fxMoveout() {\n            const props = {\n                t: 1.0,\n                offset: [0, -250],\n            };\n            // Move Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Moveout'\n        // Call effect\n        fxMoveout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Move Out\");\n        w.groupLeftPanel = w.add(\"panel\", undefined, \"Left\");\n        w.groupLeft = w.groupLeftPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupLeft.buttonLeftHalfSecond_100 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupLeft.buttonLeftHalfSecond_100.onClick = function () {\n            onLeftHalfSecond_100();\n        };\n        w.groupLeft.buttonLeftOneSecond_100 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupLeft.buttonLeftOneSecond_100.onClick = function () {\n            onLeftOneSecond_100();\n        };\n        w.groupLeft.buttonLeftHalfSecond_250 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupLeft.buttonLeftHalfSecond_250.onClick = function () {\n            onLeftHalfSecond_250();\n        };\n        w.groupLeft.buttonLeftOneSecond_250 = w.groupLeft.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupLeft.buttonLeftOneSecond_250.onClick = function () {\n            onLeftOneSecond_250();\n        };\n        w.groupRightPanel = w.add(\"panel\", undefined, \"Right\");\n        w.groupRight = w.groupRightPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupRight.buttonRightHalfSecond_100 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupRight.buttonRightHalfSecond_100.onClick = function () {\n            onRightHalfSecond_100();\n        };\n        w.groupRight.buttonRightOneSecond_100 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupRight.buttonRightOneSecond_100.onClick = function () {\n            onRightOneSecond_100();\n        };\n        w.groupRight.buttonRightHalfSecond_250 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupRight.buttonRightHalfSecond_250.onClick = function () {\n            onRightHalfSecond_250();\n        };\n        w.groupRight.buttonRightOneSecond_250 = w.groupRight.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupRight.buttonRightOneSecond_250.onClick = function () {\n            onRightOneSecond_250();\n        };\n        w.groupUpPanel = w.add(\"panel\", undefined, \"Up\");\n        w.groupUp = w.groupUpPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupUp.buttonUpHalfSecond_100 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupUp.buttonUpHalfSecond_100.onClick = function () {\n            onUpHalfSecond_100();\n        };\n        w.groupUp.buttonUpOneSecond_100 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupUp.buttonUpOneSecond_100.onClick = function () {\n            onUpOneSecond_100();\n        };\n        w.groupUp.buttonUpHalfSecond_250 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupUp.buttonUpHalfSecond_250.onClick = function () {\n            onUpHalfSecond_250();\n        };\n        w.groupUp.buttonUpOneSecond_250 = w.groupUp.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupUp.buttonUpOneSecond_250.onClick = function () {\n            onUpOneSecond_250();\n        };\n        w.groupDownPanel = w.add(\"panel\", undefined, \"Down\");\n        w.groupDown = w.groupDownPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupDown.buttonDownHalfSecond_100 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"0.5s 100px\"\n        );\n        w.groupDown.buttonDownHalfSecond_100.onClick = function () {\n            onDownHalfSecond_100();\n        };\n        w.groupDown.buttonDownOneSecond_100 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"1s 100px\"\n        );\n        w.groupDown.buttonDownOneSecond_100.onClick = function () {\n            onDownOneSecond_100();\n        };\n        w.groupDown.buttonDownHalfSecond_250 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"0.5s 250px\"\n        );\n        w.groupDown.buttonDownHalfSecond_250.onClick = function () {\n            onDownHalfSecond_250();\n        };\n        w.groupDown.buttonDownOneSecond_250 = w.groupDown.add(\n            \"button\",\n            undefined,\n            \"1s 250px\"\n        );\n        w.groupDown.buttonDownOneSecond_250.onClick = function () {\n            onDownOneSecond_250();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "b66544704932edcbc28dedd5a61b61c8c94cc26e63eb8f79075b14a743e578cd",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-pan.jsx",
      "content": "(function quickPan(thisObj) {\n    function onPanLeft_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Left 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Left 100\");\n\n        // Effect 'Pan'\n        // Left pan 100px\n        function fxPan() {\n            const props = {\n                offset: [100, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanLeft_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Left 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Left 250\");\n\n        // Effect 'Pan'\n        // Left pan 250px\n        function fxPan() {\n            const props = {\n                offset: [250, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanLeft_500() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Left 500: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Left 500\");\n\n        // Effect 'Pan'\n        // Left pan 500px\n        function fxPan() {\n            const props = {\n                offset: [500, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanRight_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Right 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Right 100\");\n\n        // Effect 'Pan'\n        // Right pan 100px\n        function fxPan() {\n            const props = {\n                offset: [-100, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanRight_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Right 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Right 250\");\n\n        // Effect 'Pan'\n        // Right pan 250px\n        function fxPan() {\n            const props = {\n                offset: [-250, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanRight_500() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Right 500: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Right 500\");\n\n        // Effect 'Pan'\n        // Right pan 500px\n        function fxPan() {\n            const props = {\n                offset: [-500, 0],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanUp_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Up 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Up 100\");\n\n        // Effect 'Pan'\n        // Up pan 100px\n        function fxPan() {\n            const props = {\n                offset: [0, 100],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanUp_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Up 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Up 250\");\n\n        // Effect 'Pan'\n        // Up pan 250px\n        function fxPan() {\n            const props = {\n                offset: [0, 250],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanUp_500() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Up 500: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Up 500\");\n\n        // Effect 'Pan'\n        // Up pan 500px\n        function fxPan() {\n            const props = {\n                offset: [0, 500],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanDown_100() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Down 100: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Down 100\");\n\n        // Effect 'Pan'\n        // Down pan 100px\n        function fxPan() {\n            const props = {\n                offset: [0, -100],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanDown_250() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Down 250: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Down 250\");\n\n        // Effect 'Pan'\n        // Down pan 250px\n        function fxPan() {\n            const props = {\n                offset: [0, -250],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onPanDown_500() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Pan - Pan Down 500: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Pan - Pan Down 500\");\n\n        // Effect 'Pan'\n        // Down pan 500px\n        function fxPan() {\n            const props = {\n                offset: [0, -500],\n            };\n            // Pan effect\n            // Props:\n            // - offset: offset in pixels (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the position set to current pos\n            // The second keyframe at the outPoint, with the position set to current pos + offset\n\n            // Check props\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentPos = [\n                    layer.transform.position.value[0],\n                    layer.transform.position.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.position.setValueAtTime(\n                    layer.inPoint,\n                    currentPos\n                );\n                var key2 = layer.transform.position.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentPos[0] + props.offset[0],\n                        currentPos[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Pan'\n        // Call effect\n        fxPan();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Pan\");\n        w.groupPanLeftPanel = w.add(\"panel\", undefined, \"Pan Left\");\n        w.groupPanLeft = w.groupPanLeftPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupPanLeft.buttonPanLeft_100 = w.groupPanLeft.add(\n            \"button\",\n            undefined,\n            \"100\"\n        );\n        w.groupPanLeft.buttonPanLeft_100.onClick = function () {\n            onPanLeft_100();\n        };\n        w.groupPanLeft.buttonPanLeft_250 = w.groupPanLeft.add(\n            \"button\",\n            undefined,\n            \"250\"\n        );\n        w.groupPanLeft.buttonPanLeft_250.onClick = function () {\n            onPanLeft_250();\n        };\n        w.groupPanLeft.buttonPanLeft_500 = w.groupPanLeft.add(\n            \"button\",\n            undefined,\n            \"500\"\n        );\n        w.groupPanLeft.buttonPanLeft_500.onClick = function () {\n            onPanLeft_500();\n        };\n        w.groupPanRightPanel = w.add(\"panel\", undefined, \"Pan Right\");\n        w.groupPanRight = w.groupPanRightPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupPanRight.buttonPanRight_100 = w.groupPanRight.add(\n            \"button\",\n            undefined,\n            \"100\"\n        );\n        w.groupPanRight.buttonPanRight_100.onClick = function () {\n            onPanRight_100();\n        };\n        w.groupPanRight.buttonPanRight_250 = w.groupPanRight.add(\n            \"button\",\n            undefined,\n            \"250\"\n        );\n        w.groupPanRight.buttonPanRight_250.onClick = function () {\n            onPanRight_250();\n        };\n        w.groupPanRight.buttonPanRight_500 = w.groupPanRight.add(\n            \"button\",\n            undefined,\n            \"500\"\n        );\n        w.groupPanRight.buttonPanRight_500.onClick = function () {\n            onPanRight_500();\n        };\n        w.groupPanUpPanel = w.add(\"panel\", undefined, \"Pan Up\");\n        w.groupPanUp = w.groupPanUpPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupPanUp.buttonPanUp_100 = w.groupPanUp.add(\n            \"button\",\n            undefined,\n            \"100\"\n        );\n        w.groupPanUp.buttonPanUp_100.onClick = function () {\n            onPanUp_100();\n        };\n        w.groupPanUp.buttonPanUp_250 = w.groupPanUp.add(\n            \"button\",\n            undefined,\n            \"250\"\n        );\n        w.groupPanUp.buttonPanUp_250.onClick = function () {\n            onPanUp_250();\n        };\n        w.groupPanUp.buttonPanUp_500 = w.groupPanUp.add(\n            \"button\",\n            undefined,\n            \"500\"\n        );\n        w.groupPanUp.buttonPanUp_500.onClick = function () {\n            onPanUp_500();\n        };\n        w.groupPanDownPanel = w.add(\"panel\", undefined, \"Pan Down\");\n        w.groupPanDown = w.groupPanDownPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupPanDown.buttonPanDown_100 = w.groupPanDown.add(\n            \"button\",\n            undefined,\n            \"100\"\n        );\n        w.groupPanDown.buttonPanDown_100.onClick = function () {\n            onPanDown_100();\n        };\n        w.groupPanDown.buttonPanDown_250 = w.groupPanDown.add(\n            \"button\",\n            undefined,\n            \"250\"\n        );\n        w.groupPanDown.buttonPanDown_250.onClick = function () {\n            onPanDown_250();\n        };\n        w.groupPanDown.buttonPanDown_500 = w.groupPanDown.add(\n            \"button\",\n            undefined,\n            \"500\"\n        );\n        w.groupPanDown.buttonPanDown_500.onClick = function () {\n            onPanDown_500();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "36bc512dff99a94954f123c38c08dc24f16c3c35415520bc29f57f0075216cb8",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-rotate.jsx",
      "content": "(function quickRotate(thisObj) {\n    function onInHalfSecond_45degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In Half Second 45deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In Half Second 45deg Cw\");\n\n        // Effect 'Rotatein'\n        // 0.5s 45deg clockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 0.5,\n                r: -45,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_45degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In One Second 45deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In One Second 45deg Cw\");\n\n        // Effect 'Rotatein'\n        // 1s 45deg clockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 1.0,\n                r: -45,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInHalfSecond_90degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In Half Second 90deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In Half Second 90deg Cw\");\n\n        // Effect 'Rotatein'\n        // 0.5s 90deg clockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 0.5,\n                r: -90,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_90degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In One Second 90deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In One Second 90deg Cw\");\n\n        // Effect 'Rotatein'\n        // 1s 90deg clockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 1.0,\n                r: -90,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInHalfSecond_45degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In Half Second 45deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In Half Second 45deg Ccw\");\n\n        // Effect 'Rotatein'\n        // 0.5s 45deg counterclockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 0.5,\n                r: 45,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_45degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In One Second 45deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In One Second 45deg Ccw\");\n\n        // Effect 'Rotatein'\n        // 1s 45deg counterclockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 1.0,\n                r: 45,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInHalfSecond_90degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In Half Second 90deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In Half Second 90deg Ccw\");\n\n        // Effect 'Rotatein'\n        // 0.5s 90deg counterclockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 0.5,\n                r: 90,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_90degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - In One Second 90deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - In One Second 90deg Ccw\");\n\n        // Effect 'Rotatein'\n        // 1s 90deg counterclockwise rotate in\n        function fxRotatein() {\n            const props = {\n                t: 1.0,\n                r: 90,\n            };\n            // Rotate In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation + r\n            // The second keyframe at the inPoint + t, with the rotation set to current rotation\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation + props.r\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentRotation\n                );\n            }\n        }\n        // End of effect 'Rotatein'\n        // Call effect\n        fxRotatein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_45degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out Half Second 45deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out Half Second 45deg Cw\");\n\n        // Effect 'Rotateout'\n        // 0.5s 45deg clockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 0.5,\n                r: -45,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_45degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out One Second 45deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out One Second 45deg Cw\");\n\n        // Effect 'Rotateout'\n        // 1s 45deg clockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 1.0,\n                r: -45,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_90degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out Half Second 90deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out Half Second 90deg Cw\");\n\n        // Effect 'Rotateout'\n        // 0.5s 90deg clockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 0.5,\n                r: -90,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_90degCw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out One Second 90deg Cw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out One Second 90deg Cw\");\n\n        // Effect 'Rotateout'\n        // 1s 90deg clockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 1.0,\n                r: -90,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_45degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out Half Second 45deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out Half Second 45deg Ccw\");\n\n        // Effect 'Rotateout'\n        // 0.5s 45deg counterclockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 0.5,\n                r: 45,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_45degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out One Second 45deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out One Second 45deg Ccw\");\n\n        // Effect 'Rotateout'\n        // 1s 45deg counterclockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 1.0,\n                r: 45,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_90degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out Half Second 90deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out Half Second 90deg Ccw\");\n\n        // Effect 'Rotateout'\n        // 0.5s 90deg counterclockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 0.5,\n                r: 90,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_90degCcw() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Rotate - Out One Second 90deg Ccw: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Rotate - Out One Second 90deg Ccw\");\n\n        // Effect 'Rotateout'\n        // 1s 90deg counterclockwise rotate out\n        function fxRotateout() {\n            const props = {\n                t: 1.0,\n                r: 90,\n            };\n            // Rotate Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Rotateout'\n        // Call effect\n        fxRotateout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Rotate\");\n        w.groupRotateinsCwPanel = w.add(\"panel\", undefined, \"Rotate In CW\");\n        w.groupRotateinsCw = w.groupRotateinsCwPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupRotateinsCw.buttonInHalfSecond_45degCw = w.groupRotateinsCw.add(\n            \"button\",\n            undefined,\n            \"0.5s 45deg\"\n        );\n        w.groupRotateinsCw.buttonInHalfSecond_45degCw.onClick = function () {\n            onInHalfSecond_45degCw();\n        };\n        w.groupRotateinsCw.buttonInOneSecond_45degCw = w.groupRotateinsCw.add(\n            \"button\",\n            undefined,\n            \"1s 45deg\"\n        );\n        w.groupRotateinsCw.buttonInOneSecond_45degCw.onClick = function () {\n            onInOneSecond_45degCw();\n        };\n        w.groupRotateinsCw.buttonInHalfSecond_90degCw = w.groupRotateinsCw.add(\n            \"button\",\n            undefined,\n            \"0.5s 90deg\"\n        );\n        w.groupRotateinsCw.buttonInHalfSecond_90degCw.onClick = function () {\n            onInHalfSecond_90degCw();\n        };\n        w.groupRotateinsCw.buttonInOneSecond_90degCw = w.groupRotateinsCw.add(\n            \"button\",\n            undefined,\n            \"1s 90deg\"\n        );\n        w.groupRotateinsCw.buttonInOneSecond_90degCw.onClick = function () {\n            onInOneSecond_90degCw();\n        };\n        w.groupRotateinsCcwPanel = w.add(\"panel\", undefined, \"Rotate In CCW\");\n        w.groupRotateinsCcw = w.groupRotateinsCcwPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupRotateinsCcw.buttonInHalfSecond_45degCcw =\n            w.groupRotateinsCcw.add(\"button\", undefined, \"0.5s 45deg\");\n        w.groupRotateinsCcw.buttonInHalfSecond_45degCcw.onClick = function () {\n            onInHalfSecond_45degCcw();\n        };\n        w.groupRotateinsCcw.buttonInOneSecond_45degCcw =\n            w.groupRotateinsCcw.add(\"button\", undefined, \"1s 45deg\");\n        w.groupRotateinsCcw.buttonInOneSecond_45degCcw.onClick = function () {\n            onInOneSecond_45degCcw();\n        };\n        w.groupRotateinsCcw.buttonInHalfSecond_90degCcw =\n            w.groupRotateinsCcw.add(\"button\", undefined, \"0.5s 90deg\");\n        w.groupRotateinsCcw.buttonInHalfSecond_90degCcw.onClick = function () {\n            onInHalfSecond_90degCcw();\n        };\n        w.groupRotateinsCcw.buttonInOneSecond_90degCcw =\n            w.groupRotateinsCcw.add(\"button\", undefined, \"1s 90deg\");\n        w.groupRotateinsCcw.buttonInOneSecond_90degCcw.onClick = function () {\n            onInOneSecond_90degCcw();\n        };\n        w.groupRotateoutsCwPanel = w.add(\"panel\", undefined, \"Rotate Out CW\");\n        w.groupRotateoutsCw = w.groupRotateoutsCwPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupRotateoutsCw.buttonOutHalfSecond_45degCw =\n            w.groupRotateoutsCw.add(\"button\", undefined, \"0.5s 45deg\");\n        w.groupRotateoutsCw.buttonOutHalfSecond_45degCw.onClick = function () {\n            onOutHalfSecond_45degCw();\n        };\n        w.groupRotateoutsCw.buttonOutOneSecond_45degCw =\n            w.groupRotateoutsCw.add(\"button\", undefined, \"1s 45deg\");\n        w.groupRotateoutsCw.buttonOutOneSecond_45degCw.onClick = function () {\n            onOutOneSecond_45degCw();\n        };\n        w.groupRotateoutsCw.buttonOutHalfSecond_90degCw =\n            w.groupRotateoutsCw.add(\"button\", undefined, \"0.5s 90deg\");\n        w.groupRotateoutsCw.buttonOutHalfSecond_90degCw.onClick = function () {\n            onOutHalfSecond_90degCw();\n        };\n        w.groupRotateoutsCw.buttonOutOneSecond_90degCw =\n            w.groupRotateoutsCw.add(\"button\", undefined, \"1s 90deg\");\n        w.groupRotateoutsCw.buttonOutOneSecond_90degCw.onClick = function () {\n            onOutOneSecond_90degCw();\n        };\n        w.groupRotateoutsCcwPanel = w.add(\"panel\", undefined, \"Rotate Out CCW\");\n        w.groupRotateoutsCcw = w.groupRotateoutsCcwPanel.add(\n            \"group\",\n            undefined,\n            {\n                orientation: \"row\",\n            }\n        );\n        w.groupRotateoutsCcw.buttonOutHalfSecond_45degCcw =\n            w.groupRotateoutsCcw.add(\"button\", undefined, \"0.5s 45deg\");\n        w.groupRotateoutsCcw.buttonOutHalfSecond_45degCcw.onClick =\n            function () {\n                onOutHalfSecond_45degCcw();\n            };\n        w.groupRotateoutsCcw.buttonOutOneSecond_45degCcw =\n            w.groupRotateoutsCcw.add(\"button\", undefined, \"1s 45deg\");\n        w.groupRotateoutsCcw.buttonOutOneSecond_45degCcw.onClick = function () {\n            onOutOneSecond_45degCcw();\n        };\n        w.groupRotateoutsCcw.buttonOutHalfSecond_90degCcw =\n            w.groupRotateoutsCcw.add(\"button\", undefined, \"0.5s 90deg\");\n        w.groupRotateoutsCcw.buttonOutHalfSecond_90degCcw.onClick =\n            function () {\n                onOutHalfSecond_90degCcw();\n            };\n        w.groupRotateoutsCcw.buttonOutOneSecond_90degCcw =\n            w.groupRotateoutsCcw.add(\"button\", undefined, \"1s 90deg\");\n        w.groupRotateoutsCcw.buttonOutOneSecond_90degCcw.onClick = function () {\n            onOutOneSecond_90degCcw();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "6ea0f5a1a55b1420001244abdc3b65e1103da220618e79a072d75a101e980ece",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-scale.jsx",
      "content": "(function quickScale(thisObj) {\n    function onInHalfSecond_10Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - In Half Second 10 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - In Half Second 10 Percent\");\n\n        // Effect 'Scalein'\n        // 0.5s 10% scale in\n        function fxScalein() {\n            const props = {\n                t: 0.5,\n                offset: [10, 10],\n            };\n            // Scale In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the scale set to current scale + offset\n            // The second keyframe at the inPoint + t, with the scale set to current scale\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(layer.inPoint, [\n                    currentScale[0] + props.offset[0],\n                    currentScale[1] + props.offset[1],\n                ]);\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentScale\n                );\n            }\n        }\n        // End of effect 'Scalein'\n        // Call effect\n        fxScalein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_10Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - In One Second 10 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - In One Second 10 Percent\");\n\n        // Effect 'Scalein'\n        // 1s 10% scale in\n        function fxScalein() {\n            const props = {\n                t: 1.0,\n                offset: [10, 10],\n            };\n            // Scale In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the scale set to current scale + offset\n            // The second keyframe at the inPoint + t, with the scale set to current scale\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(layer.inPoint, [\n                    currentScale[0] + props.offset[0],\n                    currentScale[1] + props.offset[1],\n                ]);\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentScale\n                );\n            }\n        }\n        // End of effect 'Scalein'\n        // Call effect\n        fxScalein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInHalfSecond_25Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - In Half Second 25 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - In Half Second 25 Percent\");\n\n        // Effect 'Scalein'\n        // 0.5s 25% scale in\n        function fxScalein() {\n            const props = {\n                t: 0.5,\n                offset: [25, 25],\n            };\n            // Scale In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the scale set to current scale + offset\n            // The second keyframe at the inPoint + t, with the scale set to current scale\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(layer.inPoint, [\n                    currentScale[0] + props.offset[0],\n                    currentScale[1] + props.offset[1],\n                ]);\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentScale\n                );\n            }\n        }\n        // End of effect 'Scalein'\n        // Call effect\n        fxScalein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onInOneSecond_25Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - In One Second 25 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - In One Second 25 Percent\");\n\n        // Effect 'Scalein'\n        // 1s 25% scale in\n        function fxScalein() {\n            const props = {\n                t: 1.0,\n                offset: [25, 25],\n            };\n            // Scale In effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the scale set to current scale + offset\n            // The second keyframe at the inPoint + t, with the scale set to current scale\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(layer.inPoint, [\n                    currentScale[0] + props.offset[0],\n                    currentScale[1] + props.offset[1],\n                ]);\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.inPoint + props.t,\n                    currentScale\n                );\n            }\n        }\n        // End of effect 'Scalein'\n        // Call effect\n        fxScalein();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_10Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - Out Half Second 10 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - Out Half Second 10 Percent\");\n\n        // Effect 'Scaleout'\n        // 0.5s 10% scale out\n        function fxScaleout() {\n            const props = {\n                t: 0.5,\n                offset: [10, 10],\n            };\n            // Scale Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the scale set to current scale\n            // The second keyframe at the outPoint, with the scale set to current scale + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Scaleout'\n        // Call effect\n        fxScaleout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_10Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - Out One Second 10 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - Out One Second 10 Percent\");\n\n        // Effect 'Scaleout'\n        // 1s 10% scale out\n        function fxScaleout() {\n            const props = {\n                t: 1.0,\n                offset: [10, 10],\n            };\n            // Scale Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the scale set to current scale\n            // The second keyframe at the outPoint, with the scale set to current scale + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Scaleout'\n        // Call effect\n        fxScaleout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutHalfSecond_25Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - Out Half Second 25 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - Out Half Second 25 Percent\");\n\n        // Effect 'Scaleout'\n        // 0.5s 25% scale out\n        function fxScaleout() {\n            const props = {\n                t: 0.5,\n                offset: [25, 25],\n            };\n            // Scale Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the scale set to current scale\n            // The second keyframe at the outPoint, with the scale set to current scale + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Scaleout'\n        // Call effect\n        fxScaleout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onOutOneSecond_25Percent() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Scale - Out One Second 25 Percent: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Scale - Out One Second 25 Percent\");\n\n        // Effect 'Scaleout'\n        // 1s 25% scale out\n        function fxScaleout() {\n            const props = {\n                t: 1.0,\n                offset: [25, 25],\n            };\n            // Scale Out effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - offset: offset in percent (array of two floats)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the outPoint - t, with the scale set to current scale\n            // The second keyframe at the outPoint, with the scale set to current scale + offset\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.offset) {\n                _alert(\n                    \"Error | offset is not defined in props, you must define offset.\"\n                );\n                return;\n            }\n\n            if (props.offset.length !== 2) {\n                _alert(\"Error | offset must be an array of two floats.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentScale = [\n                    layer.transform.scale.value[0],\n                    layer.transform.scale.value[1],\n                ];\n\n                // Create keyframes\n                var key1 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint - props.t,\n                    currentScale\n                );\n                var key2 = layer.transform.scale.setValueAtTime(\n                    layer.outPoint,\n                    [\n                        currentScale[0] + props.offset[0],\n                        currentScale[1] + props.offset[1],\n                    ]\n                );\n            }\n        }\n        // End of effect 'Scaleout'\n        // Call effect\n        fxScaleout();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Scale\");\n        w.groupScaleinsPanel = w.add(\"panel\", undefined, \"Scale In Effects\");\n        w.groupScaleins = w.groupScaleinsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupScaleins.buttonInHalfSecond_10Percent = w.groupScaleins.add(\n            \"button\",\n            undefined,\n            \"0.5s 10%\"\n        );\n        w.groupScaleins.buttonInHalfSecond_10Percent.onClick = function () {\n            onInHalfSecond_10Percent();\n        };\n        w.groupScaleins.buttonInOneSecond_10Percent = w.groupScaleins.add(\n            \"button\",\n            undefined,\n            \"1s 10%\"\n        );\n        w.groupScaleins.buttonInOneSecond_10Percent.onClick = function () {\n            onInOneSecond_10Percent();\n        };\n        w.groupScaleins.buttonInHalfSecond_25Percent = w.groupScaleins.add(\n            \"button\",\n            undefined,\n            \"0.5s 25%\"\n        );\n        w.groupScaleins.buttonInHalfSecond_25Percent.onClick = function () {\n            onInHalfSecond_25Percent();\n        };\n        w.groupScaleins.buttonInOneSecond_25Percent = w.groupScaleins.add(\n            \"button\",\n            undefined,\n            \"1s 25%\"\n        );\n        w.groupScaleins.buttonInOneSecond_25Percent.onClick = function () {\n            onInOneSecond_25Percent();\n        };\n        w.groupScaleoutsPanel = w.add(\"panel\", undefined, \"Scale Out Effects\");\n        w.groupScaleouts = w.groupScaleoutsPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupScaleouts.buttonOutHalfSecond_10Percent = w.groupScaleouts.add(\n            \"button\",\n            undefined,\n            \"0.5s 10%\"\n        );\n        w.groupScaleouts.buttonOutHalfSecond_10Percent.onClick = function () {\n            onOutHalfSecond_10Percent();\n        };\n        w.groupScaleouts.buttonOutOneSecond_10Percent = w.groupScaleouts.add(\n            \"button\",\n            undefined,\n            \"1s 10%\"\n        );\n        w.groupScaleouts.buttonOutOneSecond_10Percent.onClick = function () {\n            onOutOneSecond_10Percent();\n        };\n        w.groupScaleouts.buttonOutHalfSecond_25Percent = w.groupScaleouts.add(\n            \"button\",\n            undefined,\n            \"0.5s 25%\"\n        );\n        w.groupScaleouts.buttonOutHalfSecond_25Percent.onClick = function () {\n            onOutHalfSecond_25Percent();\n        };\n        w.groupScaleouts.buttonOutOneSecond_25Percent = w.groupScaleouts.add(\n            \"button\",\n            undefined,\n            \"1s 25%\"\n        );\n        w.groupScaleouts.buttonOutOneSecond_25Percent.onClick = function () {\n            onOutOneSecond_25Percent();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "e6c1103028256ee80b3785dbc72d0f37aa774d991ed393ad05c0cece09c54059",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-spins.jsx",
      "content": "(function quickSpins(thisObj) {\n    function onCwSpin_360() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Cw Spin 360: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Cw Spin 360\");\n\n        // Effect 'Spin'\n        // Spin 360° clockwise\n        function fxSpin() {\n            const props = {\n                r: 360,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onCwSpin_720() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Cw Spin 720: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Cw Spin 720\");\n\n        // Effect 'Spin'\n        // Spin 720° clockwise\n        function fxSpin() {\n            const props = {\n                r: 720,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onCwSpin_1080() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Cw Spin 1080: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Cw Spin 1080\");\n\n        // Effect 'Spin'\n        // Spin 1080° clockwise\n        function fxSpin() {\n            const props = {\n                r: 1080,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onCcwSpin_360() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Ccw Spin 360: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Ccw Spin 360\");\n\n        // Effect 'Spin'\n        // Spin 360° counterclockwise\n        function fxSpin() {\n            const props = {\n                r: -360,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onCcwSpin_720() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Ccw Spin 720: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Ccw Spin 720\");\n\n        // Effect 'Spin'\n        // Spin 720° counterclockwise\n        function fxSpin() {\n            const props = {\n                r: -720,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onCcwSpin_1080() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Spins - Ccw Spin 1080: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Spins - Ccw Spin 1080\");\n\n        // Effect 'Spin'\n        // Spin 1080° counterclockwise\n        function fxSpin() {\n            const props = {\n                r: -1080,\n            };\n            // Spin effect\n            // Props:\n            // - r: rotation in degrees (float)\n            // Creates two keyframes in all selected layers.\n            // The first keyframe at the inPoint, with the rotation set to current rotation\n            // The second keyframe at the outPoint, with the rotation set to current rotation + r\n\n            // Check props\n            if (!props.r) {\n                _alert(\"Error | r is not defined in props, you must define r.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // For each selected layer\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                var currentRotation = layer.transform.rotation.value;\n\n                // Create keyframes\n                var key1 = layer.transform.rotation.setValueAtTime(\n                    layer.inPoint,\n                    currentRotation\n                );\n                var key2 = layer.transform.rotation.setValueAtTime(\n                    layer.outPoint,\n                    currentRotation + props.r\n                );\n            }\n        }\n        // End of effect 'Spin'\n        // Call effect\n        fxSpin();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Spins\");\n        w.groupCwPanel = w.add(\"panel\", undefined, \"Clockwise\");\n        w.groupCw = w.groupCwPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupCw.buttonCwSpin_360 = w.groupCw.add(\"button\", undefined, \"360°\");\n        w.groupCw.buttonCwSpin_360.onClick = function () {\n            onCwSpin_360();\n        };\n        w.groupCw.buttonCwSpin_720 = w.groupCw.add(\"button\", undefined, \"720°\");\n        w.groupCw.buttonCwSpin_720.onClick = function () {\n            onCwSpin_720();\n        };\n        w.groupCw.buttonCwSpin_1080 = w.groupCw.add(\n            \"button\",\n            undefined,\n            \"1080°\"\n        );\n        w.groupCw.buttonCwSpin_1080.onClick = function () {\n            onCwSpin_1080();\n        };\n        w.groupCcwPanel = w.add(\"panel\", undefined, \"Counterclockwise\");\n        w.groupCcw = w.groupCcwPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupCcw.buttonCcwSpin_360 = w.groupCcw.add(\n            \"button\",\n            undefined,\n            \"360°\"\n        );\n        w.groupCcw.buttonCcwSpin_360.onClick = function () {\n            onCcwSpin_360();\n        };\n        w.groupCcw.buttonCcwSpin_720 = w.groupCcw.add(\n            \"button\",\n            undefined,\n            \"720°\"\n        );\n        w.groupCcw.buttonCcwSpin_720.onClick = function () {\n            onCcwSpin_720();\n        };\n        w.groupCcw.buttonCcwSpin_1080 = w.groupCcw.add(\n            \"button\",\n            undefined,\n            \"1080°\"\n        );\n        w.groupCcw.buttonCcwSpin_1080.onClick = function () {\n            onCcwSpin_1080();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "13f1c4e4c71204c91c77fb3bc2b855692372c707e940c5e7b00662be21274e27",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-staircases.jsx",
      "content": "(function quickStaircases(thisObj) {\n    function onFwStaircase_0_25() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Staircases - Fw Staircase 0 25: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Staircases - Fw Staircase 0 25\");\n\n        // Effect 'Staircase'\n        // 0.25s staircase\n        function fxStaircase() {\n            const props = {\n                sep: 0.25,\n            };\n            // Staircase Effect\n            // Props:\n            // - sep: separation of layer inPoints in seconds (float)\n            // This script will create a \"staircase\" from the selected layers in the timeline.\n            // First, it sorts the layers by index.\n            // Then, it sets the outPoint of all layers to the first selected layer's outPoint.\n            // Then, starting from the second layer, it sets the inPoint to the previous layer's inPoint + sep.\n\n            // Check props\n            if (!props.sep) {\n                _alert(\n                    \"Error | sep is not defined in props, you must define sep.\"\n                );\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Sort layers by index\n            selectedLayers.sort(function (a, b) {\n                return b.index - a.index;\n            });\n\n            // Set outPoint of all layers to the first selected layer's outPoint\n            var firstOutPoint = selectedLayers[0].outPoint;\n            for (var i = 0; i < selectedLayers.length; i++) {\n                selectedLayers[i].outPoint = firstOutPoint;\n            }\n\n            // Set inPoint of all layers starting from the second layer\n            for (var i = 1; i < selectedLayers.length; i++) {\n                selectedLayers[i].inPoint =\n                    selectedLayers[i - 1].inPoint + props.sep;\n            }\n        }\n        // End of effect 'Staircase'\n        // Call effect\n        fxStaircase();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onFwStaircase_0_5() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Staircases - Fw Staircase 0 5: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Staircases - Fw Staircase 0 5\");\n\n        // Effect 'Staircase'\n        // 0.5s staircase\n        function fxStaircase() {\n            const props = {\n                sep: 0.5,\n            };\n            // Staircase Effect\n            // Props:\n            // - sep: separation of layer inPoints in seconds (float)\n            // This script will create a \"staircase\" from the selected layers in the timeline.\n            // First, it sorts the layers by index.\n            // Then, it sets the outPoint of all layers to the first selected layer's outPoint.\n            // Then, starting from the second layer, it sets the inPoint to the previous layer's inPoint + sep.\n\n            // Check props\n            if (!props.sep) {\n                _alert(\n                    \"Error | sep is not defined in props, you must define sep.\"\n                );\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Sort layers by index\n            selectedLayers.sort(function (a, b) {\n                return b.index - a.index;\n            });\n\n            // Set outPoint of all layers to the first selected layer's outPoint\n            var firstOutPoint = selectedLayers[0].outPoint;\n            for (var i = 0; i < selectedLayers.length; i++) {\n                selectedLayers[i].outPoint = firstOutPoint;\n            }\n\n            // Set inPoint of all layers starting from the second layer\n            for (var i = 1; i < selectedLayers.length; i++) {\n                selectedLayers[i].inPoint =\n                    selectedLayers[i - 1].inPoint + props.sep;\n            }\n        }\n        // End of effect 'Staircase'\n        // Call effect\n        fxStaircase();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onFwStaircase_1() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Staircases - Fw Staircase 1: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Staircases - Fw Staircase 1\");\n\n        // Effect 'Staircase'\n        // 1s staircase\n        function fxStaircase() {\n            const props = {\n                sep: 1.0,\n            };\n            // Staircase Effect\n            // Props:\n            // - sep: separation of layer inPoints in seconds (float)\n            // This script will create a \"staircase\" from the selected layers in the timeline.\n            // First, it sorts the layers by index.\n            // Then, it sets the outPoint of all layers to the first selected layer's outPoint.\n            // Then, starting from the second layer, it sets the inPoint to the previous layer's inPoint + sep.\n\n            // Check props\n            if (!props.sep) {\n                _alert(\n                    \"Error | sep is not defined in props, you must define sep.\"\n                );\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Sort layers by index\n            selectedLayers.sort(function (a, b) {\n                return b.index - a.index;\n            });\n\n            // Set outPoint of all layers to the first selected layer's outPoint\n            var firstOutPoint = selectedLayers[0].outPoint;\n            for (var i = 0; i < selectedLayers.length; i++) {\n                selectedLayers[i].outPoint = firstOutPoint;\n            }\n\n            // Set inPoint of all layers starting from the second layer\n            for (var i = 1; i < selectedLayers.length; i++) {\n                selectedLayers[i].inPoint =\n                    selectedLayers[i - 1].inPoint + props.sep;\n            }\n        }\n        // End of effect 'Staircase'\n        // Call effect\n        fxStaircase();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onFwStaircase_4() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Staircases - Fw Staircase 4: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Staircases - Fw Staircase 4\");\n\n        // Effect 'Staircase'\n        // 4s staircase\n        function fxStaircase() {\n            const props = {\n                sep: 4.0,\n            };\n            // Staircase Effect\n            // Props:\n            // - sep: separation of layer inPoints in seconds (float)\n            // This script will create a \"staircase\" from the selected layers in the timeline.\n            // First, it sorts the layers by index.\n            // Then, it sets the outPoint of all layers to the first selected layer's outPoint.\n            // Then, starting from the second layer, it sets the inPoint to the previous layer's inPoint + sep.\n\n            // Check props\n            if (!props.sep) {\n                _alert(\n                    \"Error | sep is not defined in props, you must define sep.\"\n                );\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Sort layers by index\n            selectedLayers.sort(function (a, b) {\n                return b.index - a.index;\n            });\n\n            // Set outPoint of all layers to the first selected layer's outPoint\n            var firstOutPoint = selectedLayers[0].outPoint;\n            for (var i = 0; i < selectedLayers.length; i++) {\n                selectedLayers[i].outPoint = firstOutPoint;\n            }\n\n            // Set inPoint of all layers starting from the second layer\n            for (var i = 1; i < selectedLayers.length; i++) {\n                selectedLayers[i].inPoint =\n                    selectedLayers[i - 1].inPoint + props.sep;\n            }\n        }\n        // End of effect 'Staircase'\n        // Call effect\n        fxStaircase();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Staircases\");\n        w.groupForwardPanel = w.add(\"panel\", undefined, \"Forward staircases\");\n        w.groupForward = w.groupForwardPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupForward.buttonFwStaircase_0_25 = w.groupForward.add(\n            \"button\",\n            undefined,\n            \"0.25s\"\n        );\n        w.groupForward.buttonFwStaircase_0_25.onClick = function () {\n            onFwStaircase_0_25();\n        };\n        w.groupForward.buttonFwStaircase_0_5 = w.groupForward.add(\n            \"button\",\n            undefined,\n            \"0.5s\"\n        );\n        w.groupForward.buttonFwStaircase_0_5.onClick = function () {\n            onFwStaircase_0_5();\n        };\n        w.groupForward.buttonFwStaircase_1 = w.groupForward.add(\n            \"button\",\n            undefined,\n            \"1s\"\n        );\n        w.groupForward.buttonFwStaircase_1.onClick = function () {\n            onFwStaircase_1();\n        };\n        w.groupForward.buttonFwStaircase_4 = w.groupForward.add(\n            \"button\",\n            undefined,\n            \"4s\"\n        );\n        w.groupForward.buttonFwStaircase_4.onClick = function () {\n            onFwStaircase_4();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "59f952d70d122e5e853f3c0fb7ea98578c8c75b1da8b3ba28585889839fedbd5",
      "noWriteIfExists": false
    },
    {
      "filename": "panels/quick-walks.jsx",
      "content": "(function quickWalks(thisObj) {\n    function onSlightWalk_1s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Slight Walk 1s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Slight Walk 1s\");\n\n        // Effect 'Walk'\n        // 1s slight walk\n        function fxWalk() {\n            const props = {\n                t: 1.0,\n                n: 10,\n                a: 30,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onSlightWalk_2s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Slight Walk 2s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Slight Walk 2s\");\n\n        // Effect 'Walk'\n        // 2s slight walk\n        function fxWalk() {\n            const props = {\n                t: 2.0,\n                n: 10,\n                a: 30,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onSlightWalk_4s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Slight Walk 4s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Slight Walk 4s\");\n\n        // Effect 'Walk'\n        // 4s slight walk\n        function fxWalk() {\n            const props = {\n                t: 4.0,\n                n: 10,\n                a: 30,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onHeavyWalk_1s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Heavy Walk 1s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Heavy Walk 1s\");\n\n        // Effect 'Walk'\n        // 1s heavy walk\n        function fxWalk() {\n            const props = {\n                t: 1.0,\n                n: 10,\n                a: 60,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onHeavyWalk_2s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Heavy Walk 2s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Heavy Walk 2s\");\n\n        // Effect 'Walk'\n        // 2s heavy walk\n        function fxWalk() {\n            const props = {\n                t: 2.0,\n                n: 10,\n                a: 60,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function onHeavyWalk_4s() {\n        // Helpers local to the effect\n        function _alert(args) {\n            alert(\"Quick Walks - Heavy Walk 4s: \" + args);\n        }\n\n        // Get composition\n        var comp = app.project.activeItem;\n\n        if (!comp || !(comp instanceof CompItem)) {\n            _alert(\"Error | please select a composition first.\");\n            return;\n        }\n\n        // Run effect in undo group\n        app.beginUndoGroup(\"Quick Walks - Heavy Walk 4s\");\n\n        // Effect 'Walk'\n        // 4s heavy walk\n        function fxWalk() {\n            const props = {\n                t: 4.0,\n                n: 10,\n                a: 60,\n            };\n            // Walk effect\n            // Props:\n            // - t: duration in seconds (float)\n            // - n: number of oscillations (int)\n            // - a: amplitude (float)\n            // For each selected layer, it attempts to create a wiggling walk in animation.\n            // Animates the position property of the layer.\n            // There must be guiding layers, which should be null objects to specify the start and end point of the animation.\n            // Guiding layers must be named \"{name}.walk.start\" and \"{name}.walk.end\".\n\n            // Check props\n            if (!props.t) {\n                _alert(\"Error | t is not defined in props, you must define t.\");\n                return;\n            }\n\n            if (!props.n) {\n                _alert(\"Error | n is not defined in props, you must define n.\");\n                return;\n            }\n\n            if (!props.a) {\n                _alert(\"Error | a is not defined in props, you must define a.\");\n                return;\n            }\n\n            // Get selected layers\n            var selectedLayers = comp.selectedLayers;\n\n            if (!selectedLayers || selectedLayers.length === 0) {\n                _alert(\"Error | please select at least one layer.\");\n                return;\n            }\n\n            // Loop through selected layers\n            for (var i = 0; i < selectedLayers.length; i++) {\n                var layer = selectedLayers[i];\n\n                // Get start and end layers\n                var startLayer = comp.layer(layer.name + \".walk.start\");\n                var endLayer = comp.layer(layer.name + \".walk.end\");\n\n                if (!startLayer || !endLayer) {\n                    // Skip layer if start or end layer is not found\n                    continue;\n                }\n\n                // Get position properties of the start and end null objects\n                var startPos = startLayer.transform.position.value;\n                var endPos = endLayer.transform.position.value;\n\n                // Get the start and end times for keyframes\n                var startTime = layer.inPoint;\n                var endTime = layer.inPoint + props.t;\n\n                // Access the Transform > Position property of the main layer\n                var positionProp = layer.transform.position;\n\n                // Remove all existing keyframes from the position property\n                while (positionProp.numKeys > 0) {\n                    positionProp.removeKey(1); // Always remove the first key until none remain\n                }\n\n                // Calculate the vector from start to end position\n                var deltaX = endPos[0] - startPos[0];\n                var deltaY = endPos[1] - startPos[1];\n\n                /* Original code\n                // Add keyframes with oscillation\n                for (var k = 0; k <= frequency; k++) {\n                    var t = startTime + (duration / frequency) * k; // Time for the current keyframe\n                    var progress = k / frequency; // Progress ratio from 0 to 1\n            \n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n            \n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n            \n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);\n                }\n                */\n\n                // New code\n\n                // Calculate the number of keyframes\n                var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one\n\n                // Add keyframes with oscillation\n                for (var k = 0; k < numKeyframes; k++) {\n                    var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe\n                    var progress = k / numKeyframes; // Progress ratio from 0 to 1\n\n                    // Calculate position along the line\n                    var xPos = startPos[0] + deltaX * progress;\n                    var yPos = startPos[1] + deltaY * progress;\n\n                    // Add oscillation perpendicular to the line\n                    var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -\n                    var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line\n                    var offsetX = Math.cos(angle) * oscillation;\n                    var offsetY = Math.sin(angle) * oscillation;\n\n                    // Set the keyframe position\n                    positionProp.setValueAtTime(t, [\n                        xPos + offsetX,\n                        yPos + offsetY,\n                    ]);\n                }\n\n                // Add the final keyframe at the end position\n                positionProp.setValueAtTime(endTime, endPos);\n            }\n        }\n        // End of effect 'Walk'\n        // Call effect\n        fxWalk();\n\n        _alert(\"Completed.\");\n\n        app.endUndoGroup();\n    }\n    function buildUi(thisObj) {\n        var w =\n            thisObj instanceof Panel\n                ? thisObj\n                : new Window(\"palette\", \"Quick Walks\");\n        w.groupSlightWalksPanel = w.add(\"panel\", undefined, \"Slight Walks\");\n        w.groupSlightWalks = w.groupSlightWalksPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupSlightWalks.buttonSlightWalk_1s = w.groupSlightWalks.add(\n            \"button\",\n            undefined,\n            \"1s\"\n        );\n        w.groupSlightWalks.buttonSlightWalk_1s.onClick = function () {\n            onSlightWalk_1s();\n        };\n        w.groupSlightWalks.buttonSlightWalk_2s = w.groupSlightWalks.add(\n            \"button\",\n            undefined,\n            \"2s\"\n        );\n        w.groupSlightWalks.buttonSlightWalk_2s.onClick = function () {\n            onSlightWalk_2s();\n        };\n        w.groupSlightWalks.buttonSlightWalk_4s = w.groupSlightWalks.add(\n            \"button\",\n            undefined,\n            \"4s\"\n        );\n        w.groupSlightWalks.buttonSlightWalk_4s.onClick = function () {\n            onSlightWalk_4s();\n        };\n        w.groupHeavyWalksPanel = w.add(\"panel\", undefined, \"Heavy Walks\");\n        w.groupHeavyWalks = w.groupHeavyWalksPanel.add(\"group\", undefined, {\n            orientation: \"row\",\n        });\n        w.groupHeavyWalks.buttonHeavyWalk_1s = w.groupHeavyWalks.add(\n            \"button\",\n            undefined,\n            \"1s\"\n        );\n        w.groupHeavyWalks.buttonHeavyWalk_1s.onClick = function () {\n            onHeavyWalk_1s();\n        };\n        w.groupHeavyWalks.buttonHeavyWalk_2s = w.groupHeavyWalks.add(\n            \"button\",\n            undefined,\n            \"2s\"\n        );\n        w.groupHeavyWalks.buttonHeavyWalk_2s.onClick = function () {\n            onHeavyWalk_2s();\n        };\n        w.groupHeavyWalks.buttonHeavyWalk_4s = w.groupHeavyWalks.add(\n            \"button\",\n            undefined,\n            \"4s\"\n        );\n        w.groupHeavyWalks.buttonHeavyWalk_4s.onClick = function () {\n            onHeavyWalk_4s();\n        };\n        w.layout.layout(true);\n        return w;\n    }\n\n    // Show the Panel\n    var w = buildUi(thisObj);\n    if (w.toString() == \"[object Panel]\") {\n        w;\n    } else {\n        w.show();\n    }\n})(this);\n",
      "contentHash": "1536f3be207574b2fa34611c9a2a6e7e0b7cc06b966ed8f8daad0e7e08c32e45",
      "noWriteIfExists": false
    },
    {
      "filename": "README.md",
      "content": "# Adobe After Effects Panel Generator\n\nThis repository is a template for [ProJor](https://projor.io), and it can be used to generate _Adobe After Effects Panels_.\n\nEach generated panel is a `.jsx` file, that you can either _run via the [ExtendScript Debugger](https://marketplace.visualstudio.com/items?itemName=Adobe.extendscript-debug)_, or _install_.\n\nYou can modify which panels are generated by editing the [`.projor/buttonpanels.pdata.yaml`](.projor/buttonpanels.pdata.yaml) file.\n\n# Showcase\n\n| Panel | Video |\n| --- | --- |\n| ![Quick Fade Panel](showcase/Demo_QuickFade.png) | ![Quick Fade Panel](showcase/Demo_QuickFade.mov) |\n| ![Quick Move Panel](showcase/Demo_QuickMove.png) | ![Quick Move Panel](showcase/Demo_QuickMove.mov) |\n\n# Use with ExtendScript Debugger\n\n* Install [VS Code](https://code.visualstudio.com/)\n* Install the [ExtendScript Debugger](https://marketplace.visualstudio.com/items?itemName=Adobe.extendscript-debug) extension\n* Install the [ProJor VS Code Extension](https://download.projor.io)\n* Clone the repository\n* Press `Ctrl+Shift+P` and run the `Projor: Generate code` command\n* Press `F5`, and select `ExtendScript`. Select `Launch`, then select `Adobe After Effects ...`.\n\n# Install\n\n* Install the [ProJor CLI](https://download.projor.io)\n* Clone the repository\n* Run `projor generate` in the repository folder\n* Copy the generated `panels/*.jsx` files to ...\n    * Windows: `C:\\Program Files\\Adobe\\Adobe After Effects 2024\\Support Files\\Scripts\\ScriptUI Panels`\n* Add the panels from `Window` menu in After Effects\n\n# License\n\nFiles in this repository are licensed under the [MIT](LICENSE.md) license.\n\n[ProJor](https://projor.io) is licensed either under the [ProJor Free License](https://license.projor.io), or the [ProJor Commercial License](https://license.projor.io/commercial).",
      "contentHash": "a5811ec360c23c4196ab9e75b489034fb206bf8ed0a4e28107aa7fbbc5d51227",
      "noWriteIfExists": false
    }
  ]
}