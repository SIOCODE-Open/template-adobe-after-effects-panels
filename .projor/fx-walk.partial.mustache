// Walk effect
// Props:
// - t: duration in seconds (float)
// - n: number of oscillations (int)
// - a: amplitude (float)
// For each selected layer, it attempts to create a wiggling walk in animation.
// Animates the position property of the layer.
// There must be guiding layers, which should be null objects to specify the start and end point of the animation.
// Guiding layers must be named "{name}.walk.start" and "{name}.walk.end".

// Check props
if (!props.t) {
    _alert("Error | t is not defined in props, you must define t.");
    return;
}

if (!props.n) {
    _alert("Error | n is not defined in props, you must define n.");
    return;
}

if (!props.a) {
    _alert("Error | a is not defined in props, you must define a.");
    return;
}

// Get selected layers
var selectedLayers = comp.selectedLayers;

if (!selectedLayers || selectedLayers.length === 0) {
    _alert("Error | please select at least one layer.");
    return;
}

// Loop through selected layers
for (var i = 0; i < selectedLayers.length; i++) {
    var layer = selectedLayers[i];

    // Get start and end layers
    var startLayer = comp.layer(layer.name + ".walk.start");
    var endLayer = comp.layer(layer.name + ".walk.end");

    if (!startLayer || !endLayer) {
        // Skip layer if start or end layer is not found
        continue;
    }

    // Get position properties of the start and end null objects
    var startPos = startLayer.transform.position.value;
    var endPos = endLayer.transform.position.value;

    // Get the start and end times for keyframes
    var startTime = layer.inPoint;
    var endTime = layer.inPoint + props.t;

    // Access the Transform > Position property of the main layer
    var positionProp = layer.transform.position;

    // Remove all existing keyframes from the position property
    while (positionProp.numKeys > 0) {
        positionProp.removeKey(1); // Always remove the first key until none remain
    }

    // Calculate the vector from start to end position
    var deltaX = endPos[0] - startPos[0];
    var deltaY = endPos[1] - startPos[1];

    /* Original code
    // Add keyframes with oscillation
    for (var k = 0; k <= frequency; k++) {
        var t = startTime + (duration / frequency) * k; // Time for the current keyframe
        var progress = k / frequency; // Progress ratio from 0 to 1

        // Calculate position along the line
        var xPos = startPos[0] + deltaX * progress;
        var yPos = startPos[1] + deltaY * progress;

        // Add oscillation perpendicular to the line
        var oscillation = (k % 2 === 0 ? 1 : -1) * amplitude; // Alternating between + and -
        var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line
        var offsetX = Math.cos(angle) * oscillation;
        var offsetY = Math.sin(angle) * oscillation;

        // Set the keyframe position
        positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);
    }
    */

    // New code

    // Calculate the number of keyframes
    var numKeyframes = props.n * 2 + 1; // Number of keyframes is twice the number of oscillations plus one

    // Add keyframes with oscillation
    for (var k = 0; k < numKeyframes; k++) {
        var t = startTime + (props.t / numKeyframes) * k; // Time for the current keyframe
        var progress = k / numKeyframes; // Progress ratio from 0 to 1

        // Calculate position along the line
        var xPos = startPos[0] + deltaX * progress;
        var yPos = startPos[1] + deltaY * progress;

        // Add oscillation perpendicular to the line
        var oscillation = (k % 2 === 0 ? 1 : -1) * props.a; // Alternating between + and -
        var angle = Math.atan2(deltaY, deltaX) + Math.PI / 2; // Perpendicular angle to the line
        var offsetX = Math.cos(angle) * oscillation;
        var offsetY = Math.sin(angle) * oscillation;

        // Set the keyframe position
        positionProp.setValueAtTime(t, [xPos + offsetX, yPos + offsetY]);
    }

    // Add the final keyframe at the end position
    positionProp.setValueAtTime(endTime, endPos);
}